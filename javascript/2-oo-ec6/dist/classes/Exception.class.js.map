{"version":3,"sources":["../../src/classes/Exception.class.js"],"names":["Exception","current","expect","found","expectClassName","message","currentClassName","constructor","name","reduce","_reduceClassNames","_checkClassArray","_checkClassElem","_buildMessage","throwError","erro","expected","expecteds","some","_checkSomeClass","expClass","valorAnterior","valorAtual"],"mappings":";;;;;;;;;;;;IAAqBA,S;;;;;;;mCACCC,O,EAASC,M,EAAQ;AAC/B,gBAAIC,cAAJ;AAAA,gBAAWC,wBAAX;AAAA,gBAA4BC,gBAA5B;AACA,gBAAIC,mBAAmBL,QAAQM,WAAR,CAAoBC,IAA3C;AACA,gBAAI,QAAQN,MAAR,yCAAQA,MAAR,MAAmB,QAAvB,EAAiC;AAC7BE,kCAAkBF,OAAOO,MAAP,CAAcC,iBAAd,EAAiC,EAAjC,CAAlB;AACAP,wBAAQQ,iBAAiBL,gBAAjB,EAAmCJ,MAAnC,CAAR;AACH,aAHD,MAGO;AACHE,kCAAkBF,OAAOK,WAAP,CAAmBC,IAArC;AACAL,wBAAQS,gBAAgBN,gBAAhB,EAAkCJ,MAAlC,CAAR;AACH;AACD,gBAAI,CAACC,KAAL,EAAY;AACRE,0BAAUQ,cAAcP,gBAAd,EAAgCI,iBAAhC,CAAV;AACA,qBAAKI,UAAL,CAAgBT,OAAhB;AACA,uBAAO,KAAP;AACH;AACD,mBAAO,IAAP;AACH;;;mCACiBU,I,EAAM;AACpB,kBAAM,qCAAqCA,IAA3C;AACH;;;;;;kBApBgBf,S;;AAsBrB,SAASa,aAAT,CAAuBV,KAAvB,EAA8Ba,QAA9B,EAAwC;AACpC,WAAO,yDAAyDA,QAAzD,GAAoE,iBAApE,GAAwFb,KAAxF,GAAgG,GAAvG;AACH;;AAED,SAASQ,gBAAT,CAA0BV,OAA1B,EAAmCgB,SAAnC,EAA8C;AAC1C;AACA;AACA,WAAQA,UAAUC,IAAV,CAAe,oBAAY;AAAE,eAAOC,gBAAgBlB,OAAhB,EAAyBmB,SAASZ,IAAlC,CAAP;AAAgD,KAA7E,CAAR;AACA;AACH;;AAED,SAASI,eAAT,CAAyBX,OAAzB,EAAkCC,MAAlC,EAA0C;AACtC,WAAOiB,gBAAgBlB,OAAhB,EAAwBC,MAAxB,CAAP;AACH;;AAED,SAASQ,iBAAT,CAA2BW,aAA3B,EAA0CC,UAA1C,EAAsD;AAClD,WAAOD,gBAAgB,GAAhB,GAAsBC,WAAWd,IAAxC;AACH;AACD,SAASW,eAAT,CAAyBlB,OAAzB,EAAkCgB,SAAlC,EAA6C;AACzC,WAAOhB,WAAWgB,SAAlB;AACH","file":"Exception.class.js","sourcesContent":["export default class Exception {\r\n    static checkClass(current, expect) {\r\n        let found, expectClassName, message;\r\n        let currentClassName = current.constructor.name;\r\n        if (typeof (expect) == 'object') {\r\n            expectClassName = expect.reduce(_reduceClassNames, \"\");\r\n            found = _checkClassArray(currentClassName, expect);\r\n        } else {\r\n            expectClassName = expect.constructor.name;\r\n            found = _checkClassElem(currentClassName, expect);\r\n        }\r\n        if (!found) {\r\n            message = _buildMessage(currentClassName, _reduceClassNames);\r\n            this.throwError(message);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    static throwError(erro) {\r\n        throw \"Exception ao realizar operação: \" + erro;\r\n    }\r\n}\r\nfunction _buildMessage(found, expected) {\r\n    return \"Nao foi possível instanciar esta Classe, Esperado: [\" + expected + \"], encontrado [\" + found + \"]\";\r\n}\r\n\r\nfunction _checkClassArray(current, expecteds) {\r\n    // let found = false;\r\n    // expecteds.forEach(expClass => { if (_checkSomeClass(current, expClass.name)) { found = true;}});\r\n    return (expecteds.some(expClass => { return _checkSomeClass(current, expClass.name);}));\r\n    // return found;\r\n}\r\n\r\nfunction _checkClassElem(current, expect) {\r\n    return _checkSomeClass(current,expect);\r\n}\r\n\r\nfunction _reduceClassNames(valorAnterior, valorAtual) {\r\n    return valorAnterior + \"|\" + valorAtual.name\r\n}\r\nfunction _checkSomeClass(current, expecteds) {\r\n    return current == expecteds;\r\n}\r\n"]}