{"version":3,"sources":["../../src/classes/bkp.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"bkp.js","sourcesContent":["// function _comer(alimento) {\r\n//     console.log(\"Comendo \" + alimento.nome);\r\n// }\r\n// class Alimento{\r\n//     constructor(nome){\r\n//         this.nome = nome;\r\n//     }\r\n// }\r\n// class Humano{\r\n//     constructor(nome){\r\n//         this.nome = nome;\r\n//     }\r\n//     comer(alimento){\r\n//         if(alimento instanceof Alimento){\r\n//             this.alimentar(alimento);\r\n//         }\r\n//     }\r\n//     _comer.bind(this)();\r\n    \r\n// }\r\n// class Homem  extends Humano{\r\n//     constructor() {\r\n//         this.sexo = \"M\";\r\n//     }\r\n// }\r\n\r\n// class Gato {\r\n//     constructor(nome) {\r\n//         this.nome = nome;\r\n//     }\r\n\r\n//     falar() {\r\n//         console.log(this.nome + ' faça barulho.');\r\n//     }\r\n// }\r\n\r\n// class Leao extends Gato {\r\n//     falar() {\r\n//         super.falar();\r\n//         console.log(this.nome + ' roars.');\r\n//     }\r\n// }\r\n\r\n// var l = new Leao('Fuzzy');\r\n// l.falar();\r\n\r\n// // Fuzzy faça barulho.\r\n// // Fuzzy roars.\r\n\r\n// class Abstract {\r\n//     constructor() {\r\n//         console.log('gg');\r\n//         console.log(this instanceof Abstract);\r\n//         console.log('izi');\r\n//         console.log(this instanceof Derived);\r\n//         // if (new.target === Abstract) {\r\n//         //     throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n//         // }\r\n//     }\r\n// }\r\n\r\n// class Derived extends Abstract {\r\n//     constructor() {\r\n//         super();\r\n//         // more Derived-specific stuff here, maybe\r\n//     }\r\n// }\r\n\r\n// const a = new Abstract(); // new.target is Abstract, so it throws\r\n// const b = new Derived(); // new.target is Derived, so no error"]}