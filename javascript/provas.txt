1) Criar uma listagem com 7 campos com uma grande quantidade de dados (pelo menos 200.000 registros), exibindo pelo menos uma informação do tipo data e uma do tipo monetário, rodando em 2 navegadores diferentes sem travar, e exibindo um modal com os detalhes ao selecionar um registro;

2) Utilizar ES6 com conceitos de modularização e orientação a objetos;

3) Manipular data e hora, trabalhando com periodos de tempo, timezone, e manipulação de partes individuais da data e hora;

4) Criar processamentos assincronos, utilizando callbacks, com tratamento de erro e sucesso;

5) Criar classes utilizando o prototype do ES5, utilizando herança para abstrair comportamentos, e modificar comportamento de uma classe pré-existente;

6) Conectar com uma API de WebSocket com autenticação, consumindo pelo menos dois eventos distintos que necessitem processamento da informação e atualização do estado da tela em tempo real.

7) Criar no minimo dois componentes de input e um componente visual com WebComponents, utilizando o conceito de ShadowDom, templates e decorators, e incluindo os componentes na tela utilizando o conceito de "import";

8) Criar WebWorker que recebe informaçõe da tela e a atualiza;

9) Trabalhar com armazenamento do estado da tela offline utilizando storage, e sincronizando as informações quando retomar a conexão;

10) Criar um elemento canvas que se atualiza utilizando eventos externos;

11) Fazer uso de eventos em elementos de tela, utilizando o conceito de bubbling e o método preventDefault;

12) Criar formulário com campos que habilitam conforme valores selecionados, com validação de dados, exibindo os labels e a formatação de data e numero conforme a localização do usuário, e com pelo menos dois campos com mascaras e um campo numérico;

13) Realizar chamadas POST e GET com Ajax, com autenticação, trafegando informações do tipo JSON e XML, com tratamento de erros e informação visual do processamento da requisição;

14) Criar funcionalidade com processamentos sincronos e assincronos encadeados através de promise, com tratamento de erro, sucesso e com handler para quando o processamento for finalizado;

15) Criar uma funcionalidade que utilize a API de geolocalização como fonte de informação para a aplicação;